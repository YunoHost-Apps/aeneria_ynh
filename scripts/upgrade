#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# If minutes or hour do not exist, create them
if [ -z "${minutes:-}" ] || [ -z "${hour:-}" ]; then
  # Generate random running schedule, and save $hour and $minutes as app parameters
  generate_random_minutes_hour
fi

# Before version 2.x æneria could be installed under a path,
# this functionnality has been deprecated since version 2.0.0 and æneria
# now need to be installed under its own domain.
# If the app is currently installed under a path, we warn the admin
# that he should move the app under its own domain
if [ "$path" != "/" ]; then
  ynh_die --message="Since version 2.0.0, $app need to be installed under its own domain. \
  Before upgrading, change $app URL: delete the path and switch to a new domain if needed."
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
  ynh_script_progression --message="Upgrading source files..."

  # Download, check integrity, uncompress and patch the source from app.src
  ynh_setup_source --dest_dir="$install_dir" --full_replace
fi

chown -R $app:www-data "$install_dir"
chmod -R 750 "$install_dir"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression --message="Upgrading system configurations related to $app..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

# Create a dedicated PHP-FPM config
ynh_add_fpm_config

ynh_add_config --template="aeneria.cron" --destination="/etc/cron.d/$app"
chown root: "/etc/cron.d/$app"
chmod 644 "/etc/cron.d/$app"

#=================================================
# SPECIFIC SETUP
#=================================================
# CONFIGURE AENERIA
#=================================================
ynh_script_progression --message="Configuring $app..." --weight=1

ynh_add_config --template=".env" --destination="$install_dir/.env"

# Restrict rights to aeneria user only
chmod 600 "$install_dir/.env"

#=================================================
# UPGRADE AENERIA
#=================================================
ynh_script_progression --message="Upgrading $app..." --weight=1

# Install dependencies and aeneria
pushd $install_dir
  ynh_exec_as $app php$phpversion bin/console cache:clear -n
  ynh_exec_as $app php$phpversion bin/console doctrine:migrations:migrate -n

  # Set admin user
  mail=$(ynh_user_get_info --username="$admin" --key='mail')
  user_exists=$(ynh_exec_as $app php$phpversion bin/console aeneria:user:exist "$mail")
  if [ $user_exists -eq 0 ]
  then
    user_pass=$(ynh_string_random)
    ynh_exec_as $app php$phpversion bin/console aeneria:user:add "$mail" "$user_pass" -n
  fi

  # Regenerate RSA keys
  ynh_exec_as $app php$phpversion bin/console aeneria:generate-key -n
popd

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
