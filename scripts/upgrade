#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)
db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
deskey=$(ynh_app_setting_get --app=$app --key=deskey)
db_user="$db_name"

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
  ynh_legacy_permissions_delete_all

  ynh_app_setting_delete --app=$app --key=is_public
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# For aeneria source update, we use a temporary directory because
	# without it, patches can't be apply correctly:
	# In 'app-00-ldap-auth.patch' we create a new file, if we try
	# to apply the patch a second time while the file already exists, it
	# throws a warning leading to an upgrade fail.

	# Create tmpdir for new sources
	tmpdir="$(ynh_smart_mktemp min_size=300)"

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$tmpdir"

	# Replace the old aeneria by the new one
	ynh_secure_remove --file="$final_path"
	mv "$tmpdir" "$final_path"
	ynh_secure_remove --file="$tmpdir"
fi

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=1

ynh_exec_warn_less ynh_install_app_dependencies "$pkg_dependencies"

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..." --weight=2

# Create a dedicated php-fpm config
ynh_add_fpm_config --usage=low --footprint=low

#=================================================
# SPECIFIC SETUP
#=================================================
# CONFIGURE AENERIA
#=================================================
ynh_script_progression --message="Configuring aeneria..." --weight=1

aeneria_conf="$final_path/.env"

ynh_add_config --template="../conf/.env" --destination="$aeneria_conf"

# Restrict rights to aeneria user only
chmod 600 "$aeneria_conf"

#=================================================
# UPGRADE AENERIA
#=================================================
ynh_script_progression --message="Upgrading aeneria..." --weight=1

# Install dependencies and aeneria
pushd $final_path
  ynh_exec_as $app php$phpversion bin/console cache:clear -n
  ynh_exec_as $app php$phpversion bin/console doctrine:migrations:migrate -n

  # Create aeneria's user
  for username in $(ynh_user_list)
  do
    mail=$(ynh_user_get_info --username=$username --key='mail')
    user_exists=$(ynh_exec_as $app php$phpversion bin/console aeneria:user:exist "$mail")
    if [ $user_exists -eq 0 ]
    then
      user_pass=$(ynh_string_random)
      ynh_exec_as $app php$phpversion bin/console aeneria:user:add "$mail" "$user_pass" -n
    fi
  done

  # Set admin user
  mail=$(ynh_user_get_info --username=$admin --key='mail')
  ynh_exec_as $app php$phpversion bin/console aeneria:user:grant "$mail" -n

  # Regenerate RSA keys
  ynh_exec_as $app php$phpversion bin/console aeneria:generate-key --force -n
popd

#=================================================
# SET UP CRON JOB
#=================================================
ynh_script_progression --message="Setuping a cron job..." --weight=1

ynh_add_config --template="../conf/aeneria.cron" --destination="/etc/cron.d/$app"
chown root: "/etc/cron.d/$app"
chmod 644 "/etc/cron.d/$app"

#=================================================
# ADAPT HOOK FOR AENERIA INSTANCE
#=================================================
ynh_script_progression --message="Adapting hooks..." --weight=1

ynh_replace_string --match_string="APPNAMETOCHANGE" --replace_string=$app --target_file="../hooks/post_user_create"
ynh_replace_string --match_string="APPNAMETOCHANGE" --replace_string=$app --target_file="../hooks/post_user_delete"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
