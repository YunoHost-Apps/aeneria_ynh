#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# If minutes or hour do not exist, create them
if [ -z "${minutes:-}" ] || [ -z "${hour:-}" ]; then
	# Generate random running schedule, and save $hour and $minutes as app parameters
	generate_random_minutes_hour
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# For aeneria source update, we use a temporary directory because
	# without it, patches can't be apply correctly:
	# In 'app-00-ldap-auth.patch' we create a new file, if we try
	# to apply the patch a second time while the file already exists, it
	# throws a warning leading to an upgrade fail.

	# Create tmpdir for new sources
	tmpdir="$(ynh_smart_mktemp min_size=300)"

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$tmpdir"

	# Replace the old aeneria by the new one
	ynh_secure_remove --file="$install_dir"
	mv "$tmpdir" "$install_dir"
	ynh_secure_remove --file="$tmpdir"
fi

chmod -R o-rwx "$install_dir"
chown -R $app:www-data "$install_dir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

# Create a dedicated PHP-FPM config
ynh_add_fpm_config

ynh_add_config --template="aeneria.cron" --destination="/etc/cron.d/$app"
chown root: "/etc/cron.d/$app"
chmod 644 "/etc/cron.d/$app"

#=================================================
# SPECIFIC SETUP
#=================================================
# CONFIGURE AENERIA
#=================================================
ynh_script_progression --message="Configuring $app..." --weight=1

ynh_add_config --template=".env" --destination="$install_dir/.env"

# Restrict rights to aeneria user only
chmod 600 "$install_dir/.env"

#=================================================
# UPGRADE AENERIA
#=================================================
ynh_script_progression --message="Upgrading $app..." --weight=1

# Install dependencies and aeneria
pushd $install_dir
	ynh_exec_as $app php$phpversion bin/console cache:clear -n
	ynh_exec_as $app php$phpversion bin/console doctrine:migrations:migrate -n

	# Set admin user
	mail=$(ynh_user_get_info --username="$admin" --key='mail')
	user_exists=$(ynh_exec_as $app php$phpversion bin/console aeneria:user:exist "$mail")
	if [ $user_exists -eq 0 ]
	then
		user_pass=$(ynh_string_random)
		ynh_exec_as $app php$phpversion bin/console aeneria:user:add "$mail" "$user_pass" -n
	fi

	# Regenerate RSA keys
	ynh_exec_as $app php$phpversion bin/console aeneria:generate-key --force -n
popd

#=================================================
# ADAPT HOOK FOR AENERIA INSTANCE
#=================================================
ynh_script_progression --message="Adapting hooks..." --weight=1

ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="../hooks/post_app_addaccess"
ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="../hooks/post_app_removeaccess"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
