#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_exec_as
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

# Ensure php version is set
ynh_app_setting_set --app=$app --key=phpversion --value=$YNH_PHP_VERSION

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path_url)
admin=$(ynh_app_setting_get --app=$app --key=admin)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)
db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
deskey=$(ynh_app_setting_get --app=$app --key=deskey)
db_user="$db_name"

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# Compatibility with previous version
if [ -z "$path_url" ] ; then
  path_url=$(ynh_app_setting_get --app="$app" --key=path)
  ynh_app_setting_set --app=$app --key=path_url --value="$path_url"
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..." --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

if [ "$path_url" = "/" ]
then
  # Replace "//" location (due to nginx template)
  # Prevent from replacing in "http://" expressions by excluding ":" as preceding character
  sed --in-place "s@\([^:]\)//@\1/@g" /etc/nginx/conf.d/$domain.d/$app.conf
else
  # Move prefix comment #for-subdir at end of lines
  sed --in-place "s/#for-subdir\(.*\)/\1 #for-subdir/g" /etc/nginx/conf.d/$domain.d/$app.conf
fi

ynh_store_file_checksum --file="/etc/nginx/conf.d/$domain.d/$app.conf"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=1

ynh_install_app_dependencies "$pkg_dependencies"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading php-fpm configuration..." --weight=2

# Create a dedicated php-fpm config
ynh_add_fpm_config --usage=low --footprint=low --package="$extra_php_dependencies"

#=================================================
# SPECIFIC SETUP
#=================================================
# CONFIGURE AENERIA
#=================================================
ynh_script_progression --message="Configuring æneria..." --weight=1

# Copy and set aeneria dist configuration
aneria_conf="$final_path/.env"
cp ../conf/.env $aneria_conf

ynh_replace_string --match_string="database_name" --replace_string="${db_name}" --target_file="$aneria_conf"
ynh_replace_string --match_string="database_user" --replace_string="${db_user}" --target_file="$aneria_conf"
ynh_replace_string --match_string="database_password" --replace_string="${db_pwd}" --target_file="$aneria_conf"
ynh_replace_string --match_string="app_secret" --replace_string="${deskey}" --target_file="$aneria_conf"

# Restrict rights to aeneria user only
chmod 600 "$aneria_conf"

#=================================================
# UPGRADE AENERIA
#=================================================
ynh_script_progression --message="Upgrading æneria..." --weight=1

# Set permissions on app files
chown -R $app: $final_path
chmod 755 $final_path

# Install dependencies and Pilea
pushd $final_path
  ynh_exec_as $app php$phpversion bin/console cache:clear -n
  ynh_exec_as $app php$phpversion bin/console doctrine:migrations:migrate -n

  # Create Pilea's user
  for username in $(ynh_user_list)
  do
    mail=$(ynh_user_get_info --username=$username --key='mail')
    user_exists=$(ynh_exec_as $app php$phpversion bin/console pilea:user:exist "$mail")
    if [ $user_exists -eq 0 ]
    then
      user_pass=$(ynh_string_random)
      ynh_exec_as $app php$phpversion bin/console pilea:user:add "$mail" "$user_pass" -n
    fi
  done

  # Set admin user
  mail=$(ynh_user_get_info --username=$admin --key='mail')
  ynh_exec_as $app php$phpversion bin/console pilea:user:grant "$mail"
popd

#=================================================
# SET UP CRON JOB
#=================================================
ynh_script_progression --message="Setuping a cron job..." --weight=1

cron_path="/etc/cron.d/$app"
cp -a ../conf/pilea.cron "$cron_path"
chown root: "$cron_path"
chmod 644 "$cron_path"

ynh_replace_string --match_string="#USER#" --replace_string="$app" --target_file="$cron_path"
ynh_replace_string --match_string="#DESTDIR#" --replace_string="$final_path" --target_file="$cron_path"

#=================================================
# ADAPT HOOK FOR PILEA INSTANCE
#=================================================
ynh_script_progression --message="Adapting hooks..." --weight=1
ynh_replace_string --match_string="APPNAMETOCHANGE" --replace_string=$app --target_file="../hooks/post_user_create"
ynh_replace_string --match_string="APPNAMETOCHANGE" --replace_string=$app --target_file="../hooks/post_user_delete"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Securing files and directories..."

# Set permissions on app files
chown -R $app: $final_path
chmod 755 $final_path

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Upgrading SSOwat configuration..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
  # unprotected_uris allows SSO credentials to be passed anyway
  ynh_app_setting_set --app=$app --key=skipped_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
